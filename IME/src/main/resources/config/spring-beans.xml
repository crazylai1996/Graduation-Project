<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
          http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
          http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
          http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
          http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
    
    <context:property-placeholder location="classpath*:properties/*.properties"/>
    
    <!-- 应用Config -->
	<bean scope="singleton" lazy-init="false" class="gdou.laiminghai.ime.common.setting.AppSetting" />
    
    <!-- mysql数据库连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${mysql.driver}"/>
        <property name="url" value="${mysql.url}"/>
        <property name="username" value="${mysql.user}"/>
        <property name="password" value="${mysql.password}"/>
        <!-- 配置初始化连接数大小初始化、最小闲置数、最大连接数 -->
        <property name="initialSize" value="${druid.initialSize}"/>
        <property name="minIdle" value="${druid.minIdle}"/>
        <property name="maxActive" value="${druid.maxActive}"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${druid.maxWait}"/>
        
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
      	<property name="timeBetweenEvictionRunsMillis" value="${druid.maxWait}" />
      	
      	<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
      	<property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
      	
      	<property name="validationQuery" value="${druid.validationQuery}" />
        <property name="testWhileIdle" value="${druid.testWhileIdle}" />
	    <property name="testOnBorrow" value="${druid.testOnBorrow}" />
	    <property name="testOnReturn" value="${druid.testOnReturn}" />
	    
	    <property name="keepAlive" value="true" />
    </bean>
    
    <!-- 配置SqlSessionFactory对象 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!--dataSource属性指定要用到的连接池-->
		<property name="dataSource" ref="dataSource" />
		<!-- 扫描sql配置文件:mapper需要的xml文件 -->
        <property name="mapperLocations" value="classpath:mapper/*Mapper.xml"></property>
		<!--configLocation属性指定mybatis的核心配置文件-->
		<property name="configLocation" value="classpath:config/mybatis-config.xml" />
        <!-- 扫描entity包 使用别名 -->
        <property name="typeAliasesPackage" value="gdou.laiminghai.ime.model.entity"></property>
	</bean>
	
	<!--事务管理器配置-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

	<!-- 通知 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="*" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>
    
    <!-- 切面 -->
    <aop:config expose-proxy="true" proxy-target-class="true">
        <!-- 只对业务逻辑层实施事务 -->
        <aop:pointcut id="txPointcut" expression="execution(* gdou.laiminghai.ime.service..*+.*(..))"/>
        <aop:advisor id="txAdvisor" advice-ref="txAdvice" pointcut-ref="txPointcut"/>
    </aop:config>
	
	<!-- 配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="gdou.laiminghai.ime.dao.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	
	<!-- 扫描生成service组件 -->
	<context:component-scan base-package="gdou.laiminghai.ime.service.impl"/>
	
	<!-- 线程池 -->
	<bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
	    <property name="corePoolSize" value="4"/> <!--核心线程数 -->
	    <property name="maxPoolSize" value="8"/> <!--最大线程数 -->
	    <property name="keepAliveSeconds" value ="3000"/> <!--线程最大空闲时间 -->
	    <property name="queueCapacity" value="100"/> <!-- 队列大小 -->
	    <property name="threadNamePrefix" value="TASK_EXECUTOR"/>
	    <property name="rejectedExecutionHandler">
	        <bean class="java.util.concurrent.ThreadPoolExecutor.CallerRunsPolicy"/>
	    </property>
	</bean>
	
	<!-- 心得索引Dao -->
	<bean id="commentIndexDao" class="gdou.laiminghai.ime.dao.lucene.CommentIndexDao"/>
</beans>