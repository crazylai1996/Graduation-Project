<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="gdou.laiminghai.ime.dao.mapper.ProductInfoMapper">
  <resultMap id="BaseResultMap" type="ProductInfo">
    <id column="bProductId" jdbcType="BIGINT" property="productId" />
    <result column="vProductName" jdbcType="VARCHAR" property="productName" />
    <result column="iProductBrand" jdbcType="INTEGER" property="brand" />
    <result column="iProductClassify" jdbcType="INTEGER" property="classify" />
    <result column="iProductProperty" jdbcType="INTEGER" property="property" />
    <result column="iProductEffect" jdbcType="INTEGER" property="effect" />
    <result column="vProductSkinTexture" jdbcType="VARCHAR" property="skinTexture" />
    <result column="vSpec" jdbcType="VARCHAR" property="spec" />
    <result column="dComeInDate" jdbcType="DATE" property="comeInDate" />
    <result column="fReferencePrice" jdbcType="REAL" property="referencePrice" />
    <result column="fWorthCount" jdbcType="REAL" property="worthCount" />
    <result column="bCommentCount" jdbcType="BIGINT" property="commentCount" />
    <result column="bBrowserCount" jdbcType="BIGINT" property="browserCount" />
    <result column="bFollowCount" jdbcType="BIGINT" property="followCount" />
    <result column="tDesc" jdbcType="LONGVARCHAR" property="desc" />
    <result column="vCover" jdbcType="VARCHAR" property="cover"/>
  </resultMap>
  <sql id="ProductInfoColumns">
  	p.bProductId, vProductName, p.iBrand iProductBrand, p.iClassify iProductClassify, 
  	p.iProperty iProductProperty, p.iEffect iProductEffect, p.vSkinTexture vProductSkinTexture, 
    vSpec, dComeInDate, fReferencePrice, fWorthCount, bCommentCount, bBrowserCount, bFollowCount, 
    tDesc,vCover
  </sql>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from productinfo
    where bProductId = #{productId,jdbcType=BIGINT}
  </delete>
  <insert id="insert" keyColumn="bProductId" keyProperty="productId" parameterType="ProductInfo" useGeneratedKeys="true">
    insert into productinfo (vProductName, iBrand, iClassify, 
      iProperty, iEffect, vSkinTexture, 
      vSpec, dComeInDate, fReferencePrice, 
      fWorthCount, bCommentCount, bBrowserCount, 
      bFollowCount, tDesc,vCover)
    values (#{productName,jdbcType=VARCHAR}, #{brand,jdbcType=INTEGER}, #{classify,jdbcType=INTEGER}, 
      #{property,jdbcType=INTEGER}, #{effect,jdbcType=INTEGER}, #{skinTexture,jdbcType=VARCHAR}, 
      #{spec,jdbcType=VARCHAR}, #{comeInDate,jdbcType=DATE}, #{referencePrice,jdbcType=REAL}, 
      #{worthCount,jdbcType=REAL}, #{commentCount,jdbcType=BIGINT}, #{browserCount,jdbcType=BIGINT}, 
      #{followCount,jdbcType=BIGINT}, #{desc,jdbcType=LONGVARCHAR},#{cover,jdbcType=VARCHAR})
  </insert>
  <update id="updateByPrimaryKey" parameterType="ProductInfo">
    update productinfo
    set vProductName = #{productName,jdbcType=VARCHAR},
      iBrand = #{brand,jdbcType=INTEGER},
      iClassify = #{classify,jdbcType=INTEGER},
      iProperty = #{property,jdbcType=INTEGER},
      iEffect = #{effect,jdbcType=INTEGER},
      vSkinTexture = #{skinTexture,jdbcType=VARCHAR},
      vSpec = #{spec,jdbcType=VARCHAR},
      dComeInDate = #{comeInDate,jdbcType=DATE},
      fReferencePrice = #{referencePrice,jdbcType=REAL},
      fWorthCount = #{worthCount,jdbcType=REAL},
      bCommentCount = #{commentCount,jdbcType=BIGINT},
      bBrowserCount = #{browserCount,jdbcType=BIGINT},
      bFollowCount = #{followCount,jdbcType=BIGINT},
      tDesc = #{desc,jdbcType=LONGVARCHAR},
      vCover = #{cover,jdbcType=VARCHAR}
    where bProductId = #{productId,jdbcType=BIGINT}
  </update>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select <include refid="ProductInfoColumns"/>
    from productinfo p
    where bProductId = #{productId,jdbcType=BIGINT}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    select <include refid="ProductInfoColumns"/>
    from productinfo p
  </select>
  <!-- 我是分割线 -->
  <resultMap type="ProductInfo" id="ProductInfoResult" extends="BaseResultMap">
  	<!-- 产品品牌 -->
  	<association property="productBrand" column="iProductBrand" 
  		javaType="ProductBrand" resultMap="gdou.laiminghai.ime.dao.mapper.ProductBrandMapper.BaseResultMap"/>
  	<!-- 产品分类 -->
  	<association property="productClass" column="iProductClassify" 
  		javaType="CosmeticClass" resultMap="gdou.laiminghai.ime.dao.mapper.CosmeticClassMapper.BaseResultMap"/>
 	<!-- 产品属性 -->
 	<association property="productProperty" column="iProductProperty" 
 		javaType="ProductProperty" resultMap="gdou.laiminghai.ime.dao.mapper.ProductPropertyMapper.BaseResultMap"/>
 	<!-- 产品功效 -->
 	<association property="productEffect" column="iProductEffect" 
 		javaType="ProductEffect" resultMap="gdou.laiminghai.ime.dao.mapper.ProductEffectMapper.BaseResultMap"/>
  	<!-- 产品图片 -->
  	<collection property="pictures" ofType="ProductPicture"
  		 resultMap="gdou.laiminghai.ime.dao.mapper.ProductPictureMapper.BaseResultMap"/>
  </resultMap>
  <!-- 根据ID查找产品详情信息 -->
  <select id="findProductInfoById" parameterType="java.lang.Long" resultMap="ProductInfoResult">
  	select <include refid="ProductInfoColumns"/>,pb.*,cc.*,pp.*,pe.*,ppe.vPictureUrl
  	from productinfo p left join productbrand pb on p.iBrand = pb.iBrandId 
  		left join cosmeticclass cc on p.iClassify = cc.bClassId
  		left join productproperty pp on p.iProperty = pp.iPropertyId 
  		left join producteffect pe on p.iEffect = pe.iEffectId 
  		left join productpicture ppe on p.bProductId = ppe.bProductId
  	where p.bProductId = #{productId}
   </select>
   <!-- 根据ID查找多个产品信息 -->
	<select id="findMoreProductInfoByIds" resultMap="BaseResultMap">
		select p.bProductId,p.vProductName,p.vCover
		from productinfo p
		<where>
			<if test="list != null">
				<choose>
					<when test="list.size > 0">
						p.bProductId in
						<foreach collection="list" item="productId" open="("
							close=")" separator=",">
							#{productId}
						</foreach>
					</when>
					<otherwise>
						or p.bProductId = 0
					</otherwise>
				</choose>
			</if>
		</where>
	</select>
</mapper>